#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from shared import Service
from shared.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string work(string title, string content)'
  print '  string get_keywords(string title, string content, bool is_id)'
  print '  string get_id_by_term(string keywords_term)'
  print '  string get_term_by_id(string keywords_id)'
  print '  bool add_word(string word, i32 type_id)'
  print '  bool delete_entity(string word)'
  print '  string get_content_tf(string title, string content)'
  print '  string get_title_tf(string title)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Service.Client(protocol)
transport.open()

if cmd == 'work':
  if len(args) != 2:
    print 'work requires 2 args'
    sys.exit(1)
  pp.pprint(client.work(args[0],args[1],))

elif cmd == 'get_keywords':
  if len(args) != 3:
    print 'get_keywords requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_keywords(args[0],args[1],eval(args[2]),))

elif cmd == 'get_id_by_term':
  if len(args) != 1:
    print 'get_id_by_term requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_id_by_term(args[0],))

elif cmd == 'get_term_by_id':
  if len(args) != 1:
    print 'get_term_by_id requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_term_by_id(args[0],))

elif cmd == 'add_word':
  if len(args) != 2:
    print 'add_word requires 2 args'
    sys.exit(1)
  pp.pprint(client.add_word(args[0],eval(args[1]),))

elif cmd == 'delete_entity':
  if len(args) != 1:
    print 'delete_entity requires 1 args'
    sys.exit(1)
  pp.pprint(client.delete_entity(args[0],))

elif cmd == 'get_content_tf':
  if len(args) != 2:
    print 'get_content_tf requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_content_tf(args[0],args[1],))

elif cmd == 'get_title_tf':
  if len(args) != 1:
    print 'get_title_tf requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_title_tf(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
