# coding: UTF-8
'''

@author: mingliu
'''
import ThriftClient
import Service
import traceback
import pymongo
import re
import threading
import time
import sys
import os
reload(sys)
sys.getdefaultencoding()
sys.setdefaultencoding('utf8')


_CLEAN_IMG_RE = re.compile(r"<dolphinimagestart--([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}--dolphinimageend>", re.IGNORECASE)
_EXTRA_HTML_TAGS_RE = re.compile(r'<(\/)?(a|b).*?>', re.IGNORECASE)


ip = "10.2.8.223"
port = 9002
tran = "buffer"
proc = "tcompact"
timeout = 5000

def clean_content(content):
    '''
    Clean extra information in text content:
    1. remove image placeholder
    2. replace <br> with \n
    3. remove other html tags: <b>
    '''
    if not content:
        return content
    # remove image place holder
    content = _CLEAN_IMG_RE.sub('', content)
    content = content.replace('<p>', '\n')
    content = content.replace('</p>', '\n')
    content = _EXTRA_HTML_TAGS_RE.sub('', content)
    return content.strip(' \r\n')

def maketestdata():
    conn_local = pymongo.Connection()
    conn = pymongo.Connection("10.2.0.41")
    db_local = conn_local['tempd']
    db = conn['filtertest']
    for news in db.infos_12w.find():
        tit = news['news']['title'].encode('utf8')
        cont = news['news']['content'].encode('utf8')
        cont = clean_content(cont)
        data = {'title': tit, "content":cont}
        print data
        db_local.tempt.insert(data)
def test():
    conn_local = pymongo.Connection()
    db_local = conn_local['tempd']
    thrift_client = ThriftClient.ThriftClient(ip, port, tran, proc, timeout)
    client = Service.Client(thrift_client.get_protocol())
    thrift_client.connect()
    i = 0
    try:
        for news in db_local.tempt.find():
            if i == 0:
                i += 1
                continue
            i += 1
            if i == 2000:
                break
#             thrift_client.connect()
            tit = news['title']
            cont = news['content']
            try:
                tit = tit.encode('utf8')
                cont = str(cont)
#                print client.get_content_tf(tit, cont)
            except Exception, e:
                print traceback.format_exc()
                print e
                print tit
                print cont
#                 print cont
                thrift_client.close()
                thrift_client.connect()
    except Exception, e:
        print traceback.format_exc()
    finally:
        thrift_client.close()

def main():
    thread_count = 20
    thread_list = []
    for _ in range(thread_count):
        thread_item = threading.Thread(target=test)
        thread_list.append(thread_item)
    start = time.clock()
    for thread_item in thread_list:
        thread_item.start()
    
    for thread_item in thread_list:
        thread_item.join()
    end = time.clock() - start
    print end

def singal():
    thrift_client = ThriftClient.ThriftClient(ip, port, tran, proc, timeout)
    client = Service.Client(thrift_client.get_protocol())
    thrift_client.connect()
    try:
        tit = "service Calculator extends shared.SharedService"
        cont = '''/**
   * A method definition looks like C code. It has a return type, arguments,
   * and optionally a list of exceptions that it may throw. Note that argument
   * lists and exception lists are specified using the exact same syntax as
   * field lists in struct or exception definitions.
   */

   void ping(),

   i32 add(1:i32 num1, 2:i32 num2),

   i32 calculate(1:i32 logid, 2:Work w) throws (1:InvalidOperation ouch),

   /**
    * This method has a oneway modifier. That means the client only makes
    * a request and does not listen for any response at all. Oneway methods
    * must be void.
    */
   oneway void zip()

}
'''
        try:
            print client.get_content_tf(tit, cont)
        except Exception, e:
            print e
            print tit
            print cont
            thrift_client.close()
            thrift_client.connect()
    finally:
        thrift_client.close()


if __name__ == '__main__':
#     maketestdata()
    main()
#     singal()
